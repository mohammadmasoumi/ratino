"""
Django settings for divar_openplatform project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path


def get_env(key, default=None):
    return os.environ.get(key, default)


def get_list_env(key, default):
    return os.environ.get(key, default).split(",")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env('SECRET_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env('DEBUG', False)
APPEND_SLASH = False
ALLOWED_HOSTS = get_list_env('ALLOWED_HOSTS', "localhost,127.0.0.1")

CSRF_TRUSTED_ORIGINS = ['https://api.example.com']

# Application domain 

PROTOCOL = get_env('PROTOCOL', 'https')
HOSTNAME = get_env('HOST', 'host')
DOMAIN = get_env('DOMAIN', f'{PROTOCOL}://{HOSTNAME}')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'home',
    'divar_homepage',
    'divar_oauth',
    'divar_integration',
    'ratino',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = 'divar_openplatform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "templates",
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'divar_openplatform.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': get_env("POSTGRES_DATABASE_NAME", "test"),
        'USER': get_env("POSTGRES_DATABASE_USER", "postgres"),
        'PASSWORD': get_env("POSTGRES_DATABASE_PASSWORD", "1234"),
        'HOST': get_env("POSTGRES_DATABASE_HOST", "postgres"),
        'PORT': get_env("POSTGRES_DATABASE_PORT", "5432"),
    },
    'sqlite': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },

}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            "format": "{name} {levelname} {asctime} {module} {process:d} {thread:d} {message}",
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'formatter': 'verbose',
        },
        'home': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'formatter': 'verbose',
        },
        'divar_homepage': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'formatter': 'verbose',
        },
        'divar_oauth': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'formatter': 'verbose',
        },
        'divar_integration': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'formatter': 'verbose',
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static"
]
STATIC_ROOT = os.path.join(BASE_DIR, 'public', 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redis settings
REDIS_HOST = get_env('REDIS_HOST', 'redis')
REDIS_PORT = get_env('REDIS_PORT', '6379')
REDIS_DB = get_env('REDIS_DB', '0')
REDIS_PASSWORD = get_env('REDIS_PASSWORD', '1234')

# Divar Token
# Divar's token to communicate with service provider
DIVAR_TOKEN = get_env('DIVAR_TOKEN', 'DIVAR_TOKEN')

# Divar settings
DIVAR_API_KEY = get_env('DIVAR_API_KEY', "api-key")
DIVAR_APP_SLUG = get_env('DIVAR_APP_SLUG', 'app-slug')
DIVAR_FALLBACK_REDIRECT_URL = get_env('DIVAR_FALLBACK_REDIRECT_URL', DOMAIN + '/divar/home/accesstoken/')
DIVAL_OAUTH_REDIRECT_URL = get_env('DIVAL_OAUTH_REDIRECT_URL', '')
DIVAR_READ_CHAT_MESSAGE_URL = get_env('DIVAR_READ_CHAT_MESSAGE_URL', DOMAIN + '/divar/chat/messages/')
CSRF_TRUSTED_ORIGINS = ['https://*' + HOSTNAME, 'https://*.127.0.0.1']
